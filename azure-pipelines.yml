trigger:
- dev
  
variables:
  environmentName: 'dev'
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: Default

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)
      displayName: 'Cache npm'

    - script: npm i
      displayName: 'Install dependencies'

    - script: |
        echo "Building Next.js project..."
        npm run build
      displayName: 'Build Next.js project'

    - script: |
        echo "Cleaning up existing artifact folder..."
        rm -rf $(Pipeline.Workspace)/artifact
        echo "Preparing artifact folder..."
        mkdir -p $(Pipeline.Workspace)/artifact
        rsync -a --exclude='node_modules' . $(Pipeline.Workspace)/artifact/
      displayName: 'Prepare artifact folder'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/artifact'
        artifactName: 'next_build'
        publishLocation: 'Container'
      displayName: 'Publish build artifacts'

- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      name: Default

    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'next_build'
              targetPath: '$(System.DefaultWorkingDirectory)/artifact'
            displayName: 'Download Build Artifact'
          - script: |
              echo "NEXT_PUBLIC_MINIO_ENDPOINT=$(NEXT_PUBLIC_MINIO_ENDPOINT)" > .env
              echo "NEXT_PUBLIC_MINIO_PORT=$(NEXT_PUBLIC_MINIO_PORT)" >> .env
              echo "NEXT_PUBLIC_MINIO_USE_SSL=$(NEXT_PUBLIC_MINIO_USE_SSL)" >> .env
              echo "NEXT_PUBLIC_MINIO_ACCESS_KEY=$(NEXT_PUBLIC_MINIO_ACCESS_KEY)" >> .env
              echo "NEXT_PUBLIC_MINIO_SECRET_KEY=$(NEXT_PUBLIC_MINIO_SECRET_KEY)" >> .env
              echo "NEXT_PUBLIC_API_BASE_URL=$(NEXT_PUBLIC_API_BASE_URL)" >> .env
              echo "Setting up Node.js and Vercel CLI..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
              sudo npm install -g vercel
              echo "Deploying to Vercel..."
              vercel deploy --token $(VERCEL_TOKEN) --cwd $(System.DefaultWorkingDirectory)/artifact --prod --yes
            displayName: 'Deploy to Vercel'
